#include <stdio.h>

typedef struct {
    int process_id;
    int burst_time;
    int arrival_time;
    int waiting_time;
    int turnaround_time;
} Process;

void swap(Process* a, Process* b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}

void sort_by_burst_time(Process processes[], int num_processes) {
    for (int i = 0; i < num_processes - 1; i++) {
        for (int j = 0; j < num_processes - i - 1; j++) {
            if (processes[j].burst_time > processes[j + 1].burst_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void compute_waiting_time(Process processes[], int num_processes) {
    processes[0].waiting_time = 0;

    for (int i = 1; i < num_processes; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
    }
}

void compute_turnaround_time(Process processes[], int num_processes) {
    for (int i = 0; i < num_processes; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }
}

void compute_average_times(Process processes[], int num_processes) {
    float total_waiting_time = 0;
    float total_turnaround_time = 0;

    compute_waiting_time(processes, num_processes);
    compute_turnaround_time(processes, num_processes);

    for (int i = 0; i < num_processes; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    float avg_waiting_time = total_waiting_time / num_processes;
    float avg_turnaround_time = total_turnaround_time / num_processes;

    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    Process processes[] = {
        {0, 2, 0, 0, 0},
        {1, 4, 0, 0, 0},
        {2, 8, 0, 0, 0}
    };
    int num_processes = sizeof(processes) / sizeof(processes[0]);

    sort_by_burst_time(processes, num_processes);
    compute_average_times(processes, num_processes);

    return 0;
}
